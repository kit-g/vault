basePath: /
definitions:
  models.AttachmentOut:
    properties:
      filename:
        example: document.pdf
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      mime_type:
        example: application/pdf
        type: string
      size:
        example: 123456
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      code:
        type: string
      error:
        type: string
    type: object
  models.Login:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.LoginOut:
    properties:
      session:
        $ref: '#/definitions/models.Session'
      user:
        $ref: '#/definitions/models.UserOut'
    type: object
  models.NoteIn:
    properties:
      content:
        example: Notes from the meeting with the client.
        type: string
      title:
        example: Meeting Notes
        type: string
    required:
    - content
    - title
    type: object
  models.NoteOut:
    properties:
      archived:
        type: boolean
      attachments:
        items:
          $ref: '#/definitions/models.AttachmentOut'
        type: array
      content:
        example: Notes from the meeting with the client.
        type: string
      created_at:
        type: string
      encrypted:
        type: boolean
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      title:
        example: Meeting Notes
        type: string
      updated_at:
        type: string
    type: object
  models.Session:
    properties:
      refresh:
        type: string
      token:
        type: string
    type: object
  models.UserIn:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        minLength: 6
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.UserOut:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  notes.PresignDownloadResponse:
    properties:
      url:
        type: string
    type: object
  notes.PresignUploadRequest:
    properties:
      content_type:
        type: string
      filename:
        type: string
    required:
    - content_type
    - filename
    type: object
  notes.PresignUploadResponse:
    properties:
      key:
        type: string
      url:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: Kit
    url: https://github.com/kit-g
  description: A simple Secrets storage API
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Vault API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginOut'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Log in a user
      tags:
      - auth
  /me:
    get:
      description: Returns the currently authenticated user's information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserOut'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - auth
  /notes:
    get:
      consumes:
      - application/json
      description: Returns paginated notes for the authenticated user with optional
        filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by archived status
        in: query
        name: archived
        type: boolean
      - description: Filter by encrypted status
        in: query
        name: encrypted
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NoteOut'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List user notes
      tags:
      - notes
    post:
      consumes:
      - application/json
      description: Creates a note for the authenticated user
      parameters:
      - description: Note object
        in: body
        name: note
        required: true
        schema:
          $ref: '#/definitions/models.NoteIn'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.NoteOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new note
      tags:
      - notes
  /notes/{noteId}:
    delete:
      description: Deletes a note owned by the authenticated user
      parameters:
      - description: Note ID
        in: path
        name: noteId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a note
      tags:
      - notes
    get:
      description: Retrieves a specific note owned by the authenticated user
      parameters:
      - description: Note UUID
        in: path
        name: noteId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NoteOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a single note
      tags:
      - notes
    put:
      consumes:
      - application/json
      description: Updates the note fields for the authenticated user
      parameters:
      - description: Note ID
        in: path
        name: noteId
        required: true
        type: string
      - description: Note fields
        in: body
        name: note
        required: true
        schema:
          $ref: '#/definitions/models.NoteIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NoteOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Edit a note
      tags:
      - notes
  /notes/{noteId}/attachments:
    post:
      consumes:
      - application/json
      description: Generates a presigned URL for uploading an attachment to a specific
        note
      parameters:
      - description: Note ID
        in: path
        name: noteId
        required: true
        type: string
      - description: Upload parameters
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/notes.PresignUploadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/notes.PresignUploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Generate a presigned S3 upload URL
      tags:
      - notes
  /notes/{noteId}/attachments/{attachmentId}:
    delete:
      parameters:
      - description: Note ID
        in: path
        name: noteId
        required: true
        type: string
      - description: Attachment ID
        in: path
        name: attachmentId
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an attachment
      tags:
      - notes
    get:
      description: Generates a temporary URL for securely downloading a note's attachment.
      parameters:
      - description: Note ID (UUID)
        in: path
        name: noteId
        required: true
        type: string
      - description: Attachment ID (UUID)
        in: path
        name: attachmentId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/notes.PresignDownloadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get presigned download URL for an attachment
      tags:
      - notes
  /refresh:
    post:
      consumes:
      - application/json
      description: Refreshes JWT access token using a refresh token
      parameters:
      - description: Refresh token payload
        in: body
        name: refreshToken
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Session'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register using email, password, and username
      parameters:
      - description: user info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UserIn'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserOut'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
swagger: "2.0"
